#!/usr/bin/python
# -*- coding: utf-8 -*-

from os import path, popen, system
import gtk
import pango
from gtk import glade


LOCALE_DIR = '@LOCALE_DIR@'
GLADE_FILE = path.join('@IBUS_MOZC_DIR@', 'setup.glade')
MOZC_CONFIG = path.join('@BIN_DIR@', 'mozc-config')

enums = {
    'preedit_method': ['ROMAN', 'KANA'],
    'punctuation_method': ['KUTEN_TOUTEN', 'COMMA_PERIOD',
                           'KUTEN_PERIOD', 'COMMA_TOUTEN'],
    'symbol_method': ['CORNER_BRACKET_MIDDLE_DOT',
                      'SQUARE_BRACKET_SLCORNER_BRASH',
                      'CORNER_BRACKET_SLASH',
                      'SQUARE_BRACKET_MIDDLE_DOT'],
    'space_character_form': ['FUNDAMENTAL_INPUT_MODE',
                             'FUNDAMENTAL_FULL_WIDTH',
                             'FUNDAMENTAL_HALF_WIDTH'],
    'selection_shortcut': ['NO_SHORTCUT',
                           'SHORTCUT_123456789',
                           'SHORTCUT_ASDFGHJKL],'],
    'session_keymap': ['CUSTOM', 'ATOK', 'MSIME', 'KOTOERI'],
    'history_learning_level': ['DEFAULT_HISTORY', 'READ_ONLY', 'NO_HISTORY']
}

COMMANDS = []

def get(name):
    return popen('%s -g %s' % (MOZC_CONFIG, name)).readline().split(': ')[1].strip()

def set(name, value):
    print 'mozc-config -s', name, value
    COMMANDS.append([name, value])

def init_widget(xml):
    for k in enums.keys():
        try:
            xml.get_widget(k).set_active(enums[k].index(get(k)))
        except:
            pass

    for k in ['use_single_kanji_conversion', 'use_symbol_conversion',
              'use_date_conversion', 'use_number_conversion',
              'use_auto_ime_turn_off',
              'use_history_suggest','use_dictionary_suggest']:
        xml.get_widget(k).set_active(True if get(k) == 'true' else False)

    for k in ['suggestions_size']:
        xml.get_widget(k).set_value(int(get(k)))

def on_changed_tree_view(combo, path, new_iter, model, id):
    model[path][id] = combo.get_property("model").get(new_iter, 0)[0]
    set_character_form_rules(model[path])

conv = {
    'KATAKANA': 'カタカナ',
    'ALPHABET': 'アルファベット',
    'NUMBER': '数字',
    '\\"\\\'': '"\'',
    '#%&@$^_|`~\\\\': '#%&@$^_|`~\\',
    'HALF_WIDTH': '半角',
    'FULL_WIDTH': '全角',
    'LAST_FORM': '学習',
    'NO_CONVERSION': '無変換',
}

rev = {
    '"\'': '"\'\\',
    '#%&@$^_|`~\\': '#%&@$^_|`~\\',
}
for k, v in conv.items():
    rev.setdefault(v, k)

def set_character_form_rules(rule):
    rule = " ".join(["'"+rev.get(s, s)+"'" for s in rule])
    print 'mozc-config -s', "character_form_rules", rule
    COMMANDS.append(["character_form_rules", rule])

def get_character_form_rules():
    rules = []
    n = 0
    for s in  popen('%s -g %s' % (MOZC_CONFIG, "character_form_rules")):
        if s.startswith('character_form_rules'):
            rules.append([])
            continue
        elif s.startswith('}'):
            n += 1
        else:
            s = s.split(': ')[1].strip()
            if s[0] == s[-1] == '"':
                s = s[1:-1]
            rules[n].append(conv.get(s, s))
    return rules

def init_tree_view(xml):
    tv = xml.get_widget("character_form_rules")

    cell_text = gtk.CellRendererText()

    c = gtk.TreeViewColumn("文字グループ", cell_text, text=0)
    c.set_alignment(0.5)
    c.set_property("expand", True)
    tv.append_column(c)

    char_form = gtk.ListStore(str)
    for item in  ["HALF_WIDTH", "FULL_WIDTH", "LAST_FORM", "NO_CONVERSION"]:
        char_form.append([conv.get(item, item)])

    cell_combo1 = gtk.CellRendererCombo()
    cell_combo1.set_property("xalign", 0.5)
    cell_combo1.set_property("model", char_form)
    cell_combo1.set_property("editable", True)
    cell_combo1.set_property("text-column", 0)

    c = gtk.TreeViewColumn("変換前文字列", cell_combo1, text=1)
    c.set_alignment(0.5)
    c.set_property("expand", True)
    tv.append_column(c)

    cell_combo2 = gtk.CellRendererCombo()
    cell_combo2.set_property("xalign", 0.5)
    cell_combo2.set_property("model", char_form)
    cell_combo2.set_property("editable", True)
    cell_combo2.set_property("text-column", 0)

    c = gtk.TreeViewColumn("変換中文字列", cell_combo2, text=2)
    c.set_alignment(0.5)
    c.set_property("expand", True)
    tv.append_column(c)

    rules = gtk.ListStore(str, str, str)
    tv.set_model(rules)

    for rule in get_character_form_rules():
        rules.append(rule)

    cell_combo1.connect("changed", on_changed_tree_view, rules, 1)
    cell_combo2.connect("changed", on_changed_tree_view, rules, 2)

class MozcSetup(object):
    def __init__(self):
        glade.bindtextdomain("ibus-mozc", LOCALE_DIR)
        glade.textdomain("ibus-mozc")

        glade_file = GLADE_FILE
        self.xml = glade.XML(glade_file)

        init_tree_view(self.xml)

        init_widget(self.xml)

        self.xml.signal_autoconnect(self)

    def on_ok_button_clicked(self, widget):
        print 'OK button clicked'
        for k, v in COMMANDS:
            print '%s -s %s %s' % (MOZC_CONFIG, k, v)
            system('%s -s %s %s' % (MOZC_CONFIG, k, v))
        system('%s -r' % MOZC_CONFIG)
        gtk.main_quit()

    def on_cancel_button_clicked(self, widget):
        print 'Cancel button clicked'
        gtk.main_quit()

    def on_combobox_changed(self, widget):
        set(widget.name, enums[widget.name][widget.get_active()])

    def on_checkbutton_toggled(self, widget):
        set(widget.name, 'true' if widget.get_active() else 'false')

    def on_spinbutton_value_changed(self, widget):
        set(widget.name, str(widget.get_value_as_int()))

    def on_main_delete(self, widget, event):
        self.on_cancel_button_clicked(widget)
        return True

    def run(self):
        gtk.main()


if __name__ == "__main__":
    MozcSetup().run()

